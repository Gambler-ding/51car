C51 COMPILER V9.57.0.0   MOTOR                                                             03/31/2023 21:50:02 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\MOTOR.obj
COMPILER INVOKED BY: D:\keil\keil51\C51\BIN\C51.EXE USER\MOTOR\MOTOR.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Listings;.\USER
                    -;.\USER\OLED;.\USER\MOTOR;.\USER\TIMER;.\USER\ADC;.\USER\UART;.\USER\EEPROM;.\USER\ACTION;.\USER\UART) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\MOTOR.lst) OBJECT(.\Objects\MOTOR.obj)

line level    source

   1          #include "MOTOR.h"
   2          #include "stc15w4k.h"
   3          #include "oled.h"
   4          #include <intrins.h>
   5          
   6          #define FrontStatus P7
   7          #define BackStatus  P6
   8          
   9          bdata float motor_l_pwm;
  10          bdata float motor_r_pwm;
  11          
  12          data u8 frontPortData,frontPortDataA,frontPortDataB,frontPortDataC;  
  13          data u8 BackPortData,BackPortDataA,BackPortDataB,BackPortDataC;
  14          
  15          sbit MOTOR_LF_FRONT     = P4^5;
  16          sbit MOTOR_LF_BACK      = P4^6;
  17          
  18          sbit MOTOR_LB_FRONT     = P4^4;
  19          sbit MOTOR_LB_BACK      = P4^3;
  20          
  21          sbit MOTOR_RF_FRONT     = P4^7;
  22          sbit MOTOR_RF_BACK      = P4^0;
  23          
  24          sbit MOTOR_RB_FRONT     = P4^2;
  25          sbit MOTOR_RB_BACK      = P4^1;
  26          
  27          u8 motor_counter;
  28          
  29          /*1000us*/
  30          void motor_tim1_init()
  31          {
  32   1              motor_counter = 0;
  33   1              AUXR |= 0x80;                   //定时器时钟1T模式
  34   1              TMOD &= 0xF0;                   //设置定时器模式
  35   1              TMOD |= 0x01;                   //设置定时器模z式
  36   1              TL0 = 0xA0;                             //设置定时初始值
  37   1              TH0 = 0xF6;                             //设置定时初始值
  38   1              ET0 = 1;                                //定时器0允许中断
  39   1              TF0 = 0;                                //清除TF0标志
  40   1              TR0 = 1;                                //定时器0开始计时
  41   1              EA = 1;                                 //总计时器
  42   1      }
  43          
  44          void motor_pwm_set(float pwml,float pwmr)
  45          {
  46   1              if(pwml > 100)                          //电机速度限幅
  47   1              {
  48   2                      pwml = 100;
  49   2              }
  50   1          else if (pwmr < -100)               //电机速度限幅
  51   1          {
  52   2              pwmr = -100;
  53   2          }  
C51 COMPILER V9.57.0.0   MOTOR                                                             03/31/2023 21:50:02 PAGE 2   

  54   1              motor_l_pwm=pwml;
  55   1              motor_r_pwm=pwmr;
  56   1      }
  57          void motor_init()
  58          {
  59   1              motor_pwm_set(0,0);     //电机PWM设置 0
  60   1              motor_tim1_init();   //模拟电机IO PWM波定时器初始化
  61   1      }
  62          
  63          //正反皆可 若为反则 pwm为负数
  64          void track_PID(int pwm)
  65          {
  66   1              static float Integral_error,Last_error,error = 0;
  67   1              int L_Pwm,R_Pwm;
  68   1              code float P=4.5,I = 0.000001,D =9;
  69   1              code u8 limit_pwm=50;
  70   1              switch(frontPortData)
  71   1                      {                                         //421 8421
  72   2                              case 0x01:              error=8;        break;      //111 1110 0111 111
  73   2                              case 0x03:              error=7;        break;      //111 1100 0011 111
  74   2                              case 0x07:              error=6;        break;      //111 1000 0001 111
  75   2                              case 0x02:              error=5;        break;      //111 1101 1011 111
  76   2                              case 0x06:              error=4;        break;      //111 1001 1001 111
  77   2                              case 0x0E:              error=3;        break;      //111 0001 1000 111
  78   2                              case 0x04:              error=2;        break;      //111 1011 1101 111
  79   2                              case 0x0C:              error=1;        break;      //111 0011 1100 111
  80   2                              case 0x1C:              error=0;        break;      //110 0011 1100 011
  81   2                              case 0x7f:              error=0;        break;      //000 0000 0000 000
  82   2                              case 0x08:              error=0;        break;      //111 0111 1110 111
  83   2                              case 0x18:              error=-1;       break;      //110 0111 1110 011
  84   2                              case 0x38:              error=-2;       break;      //100 0111 1110 001
  85   2                              case 0x10:              error=-3;       break;      //110 1111 1111 011
  86   2                              case 0x30:              error=-4;       break;      //100 1111 1111 001
  87   2                              case 0x70:              error=-5;       break;      //000 1111 1111 000
  88   2                              case 0x20:              error=-6;       break;      //101 1111 1111 101
  89   2                              case 0x60:              error=-7;       break;      //001 1111 1111 100
  90   2                              case 0x40:              error=-8;       break;      //011 1111 1111 110
  91   2                              default :                       error=0;        break;
  92   2                      }
  93   1                      //error=error<0?-error:error;
  94   1                      //OLED_ShowNum(20,4,frontPortData,2,16);
  95   1                      
  96   1                      Integral_error+=error;
  97   1                      
  98   1                      R_Pwm = (pwm-(error*P+Integral_error*I+(error-Last_error)*D));
  99   1                      L_Pwm = (pwm+(error*P+Integral_error*I+(error-Last_error)*D));
 100   1                      
 101   1                      Last_error = error;
 102   1                      
 103   1                      if(pwm > 0)
 104   1                      {
 105   2                              if(L_Pwm > (pwm+limit_pwm))
 106   2                                      L_Pwm = (pwm+limit_pwm);
 107   2                              if(R_Pwm > (pwm+limit_pwm))
 108   2                                      R_Pwm = (pwm+limit_pwm);
 109   2                              if(L_Pwm <=(pwm-limit_pwm))
 110   2                                      L_Pwm = (pwm-limit_pwm);
 111   2                              if(R_Pwm <= (pwm-limit_pwm))
 112   2                                      R_Pwm = (pwm-limit_pwm);
 113   2                      }
 114   1                       motor_pwm_set(L_Pwm,R_Pwm);
 115   1                      OLED_ShowNum(0,4,L_Pwm,2,16);
C51 COMPILER V9.57.0.0   MOTOR                                                             03/31/2023 21:50:02 PAGE 3   

 116   1                      OLED_ShowNum(16,4,R_Pwm,2,16);
 117   1      }
 118          void brake()
 119          {
 120   1              //TODO写计时器延时
 121   1                      MOTOR_RF_FRONT = 1;
 122   1                      MOTOR_RF_BACK = 1;      
 123   1                      MOTOR_RB_FRONT = 1;
 124   1                      MOTOR_RB_BACK = 1;
 125   1                      MOTOR_LF_FRONT = 1;
 126   1                      MOTOR_LF_BACK = 1;       
 127   1                      MOTOR_LB_FRONT = 1;
 128   1                      MOTOR_LB_BACK = 1;  
 129   1      }
 130          void TestIrStatus(void)
 131          {
 132   1              u8 cnt_i,UserReg;
 133   1              u8 idata TestBuffer[11]="F:00000000";
 134   1              UserReg = frontPortData;
 135   1              for( cnt_i=2;cnt_i<10;cnt_i++)
 136   1                              {
 137   2                              if (UserReg & 0x80)   TestBuffer[cnt_i] ='1';
 138   2                              else                  TestBuffer[cnt_i] ='0';
 139   2                              UserReg <<= 1;
 140   2                              }
 141   1              OLED_ShowString(0,0,TestBuffer,16);
 142   1      
 143   1      
 144   1              TestBuffer[0] = 'B';
 145   1              UserReg = BackPortData;
 146   1              for( cnt_i=2;cnt_i<10;cnt_i++)
 147   1                              {
 148   2                              if (UserReg & 0x80)   TestBuffer[cnt_i] ='1';
 149   2                              else                  TestBuffer[cnt_i] ='0';
 150   2                              UserReg <<= 1;
 151   2                              }
 152   1              OLED_ShowString(0,2,TestBuffer,16);
 153   1              _nop_();        
 154   1      }
 155          void motor_irp()        interrupt 1
 156          {
 157   1              TR0=0;
 158   1              TL0 = 0xA0;                             //设置定时初始值
 159   1              TH0 = 0xF6;                             //设置定时初始值
 160   1              TR0=1;
 161   1              motor_counter++;
 162   1              //OLED_ShowString(0,4,"yyds",16);
 163   1          if (motor_counter >= 100)           //pwm波周期设置 周期= 100 * 100us = 10000us=10ms 即电机pwm波频率100Hz 周期1
             -0ms
 164   1          {
 165   2              motor_counter = 0;
 166   2          }
 167   1              //左motor_pwm设置
 168   1              if (motor_l_pwm >= 0)
 169   1              {
 170   2                      //左轮正转
 171   2                      
 172   2                      if(motor_counter < motor_l_pwm)  
 173   2                      {
 174   3                              MOTOR_LF_FRONT = 1;
 175   3                              MOTOR_LF_BACK = 0;       
 176   3                              MOTOR_LB_FRONT = 1;
C51 COMPILER V9.57.0.0   MOTOR                                                             03/31/2023 21:50:02 PAGE 4   

 177   3                              MOTOR_LB_BACK = 0;      
 178   3                      }
 179   2                      else
 180   2                      {
 181   3                              MOTOR_LF_FRONT = 0;
 182   3                              MOTOR_LF_BACK = 0;      
 183   3                              
 184   3                              MOTOR_LB_FRONT = 0;
 185   3                              MOTOR_LB_BACK = 0;    
 186   3                      }
 187   2              }
 188   1              else
 189   1              {
 190   2                      //左轮反转
 191   2                      
 192   2                       if(motor_counter < -motor_l_pwm)
 193   2                      {
 194   3                              MOTOR_LF_FRONT = 0;
 195   3                              MOTOR_LF_BACK = 1;      
 196   3                              MOTOR_LB_FRONT = 0;
 197   3                              MOTOR_LB_BACK = 1;      
 198   3                      }
 199   2                      else
 200   2                      {
 201   3                              MOTOR_LF_FRONT = 0;
 202   3                              MOTOR_LF_BACK = 0;      
 203   3                              
 204   3                              MOTOR_LB_FRONT = 0;
 205   3                              MOTOR_LB_BACK = 0;    
 206   3                      }
 207   2              }
 208   1              
 209   1              if (motor_r_pwm >= 0)
 210   1              {
 211   2                      //右轮正转
 212   2                      
 213   2                      if(motor_counter < motor_r_pwm)  
 214   2                      {
 215   3                              MOTOR_RF_FRONT = 1;
 216   3                              MOTOR_RF_BACK = 0;      
 217   3                              MOTOR_RB_FRONT = 1;
 218   3                              MOTOR_RB_BACK = 0;      
 219   3                      }
 220   2                      else
 221   2                      {
 222   3                              MOTOR_RF_FRONT = 0;
 223   3                              MOTOR_RF_BACK = 0;      
 224   3                              
 225   3                              MOTOR_RB_FRONT = 0;
 226   3                              MOTOR_RB_BACK = 0;    
 227   3                      }
 228   2              }
 229   1              else
 230   1              {
 231   2                      //右轮反转
 232   2                      
 233   2                       if(motor_counter < -motor_r_pwm)
 234   2                      {
 235   3                              MOTOR_RF_FRONT = 0;
 236   3                              MOTOR_RF_BACK = 1;      
 237   3                              MOTOR_RB_FRONT = 0;
 238   3                              MOTOR_RB_BACK = 1;      
C51 COMPILER V9.57.0.0   MOTOR                                                             03/31/2023 21:50:02 PAGE 5   

 239   3                      }
 240   2                      else
 241   2                      {
 242   3                              MOTOR_RF_FRONT = 0;
 243   3                              MOTOR_RF_BACK = 0;      
 244   3                              
 245   3                              MOTOR_RB_FRONT = 0;
 246   3                              MOTOR_RB_BACK = 0;    
 247   3                      }
 248   2              }
 249   1      /*------3中取二规则读取七路传感器--------
 250   1      /*前端传感器数据循环更新*/
 251   1              frontPortDataA = frontPortDataB;
 252   1              frontPortDataB = frontPortDataC;
 253   1              frontPortDataC = FrontStatus & 0x7f;    
 254   1              frontPortData = (frontPortDataB & ( frontPortDataA | frontPortDataC)) | (frontPortDataA & frontPortDataC)
             -;
 255   1      /*后端传感器数据循环更新*/
 256   1              BackPortDataA = BackPortDataB;
 257   1              BackPortDataB = BackPortDataC;
 258   1              BackPortDataC = BackStatus & 0x7f;
 259   1              BackPortData = (BackPortDataB & ( BackPortDataA | BackPortDataC)) | (BackPortDataA & BackPortDataC);
 260   1              
 261   1      /*------3中取二规则------*/     
 262   1      
 263   1              _nop_();
 264   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1412    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      14
   IDATA SIZE       =   ----      11
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
