C51 COMPILER V9.57.0.0   MOTOR                                                             03/27/2023 21:48:32 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\MOTOR.obj
COMPILER INVOKED BY: D:\keil\keil51\C51\BIN\C51.EXE USER\MOTOR\MOTOR.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Listings;.\USER
                    -;.\USER\OLED;.\USER\MOTOR;.\USER\TIMER;.\USER\ADC;.\USER\UART;.\USER\EEPROM) DEBUG OBJECTEXTEND PRINT(.\Listings\MOTOR.l
                    -st) OBJECT(.\Objects\MOTOR.obj)

line level    source

   1          #include "MOTOR.h"
   2          #include "stc15w4k.h"
   3          #include "oled.h"
   4          #include <intrins.h>
   5          
   6          #define FrontStatus P7
   7          #define BackStatus  P6
   8          
   9          bdata float motor_l_pwm;
  10          bdata float motor_r_pwm;
  11          
  12          data u8 frontPortData,frontPortDataA,frontPortDataB,frontPortDataC;  
  13          data u8 BackPortData,BackPortDataA,BackPortDataB,BackPortDataC;
  14          
  15          sbit MOTOR_LF_FRONT     = P4^5;
  16          sbit MOTOR_LF_BACK      = P4^6;
  17          
  18          sbit MOTOR_LB_FRONT     = P4^4;
  19          sbit MOTOR_LB_BACK      = P4^3;
  20          
  21          sbit MOTOR_RF_FRONT     = P4^7;
  22          sbit MOTOR_RF_BACK      = P4^0;
  23          
  24          sbit MOTOR_RB_FRONT     = P4^2;
  25          sbit MOTOR_RB_BACK      = P4^1;
  26          
  27          u8 motor_counter;
  28          
  29          bdata bit track_flag;
  30          /*1000us*/
  31          void motor_tim1_init()
  32          {
  33   1              motor_counter = 0;
  34   1              AUXR |= 0x80;                   //定时器时钟1T模式
  35   1              TMOD &= 0xF0;                   //设置定时器模式
  36   1              TMOD |= 0x01;                   //设置定时器模z式
  37   1              TL0 = 0xA0;                             //设置定时初始值
  38   1              TH0 = 0xF6;                             //设置定时初始值
  39   1              ET0 = 1;                                //定时器0允许中断
  40   1              TF0 = 0;                                //清除TF0标志
  41   1              TR0 = 1;                                //定时器0开始计时
  42   1              EA = 1;                                 //总计时器
  43   1      }
  44          
  45          void motor_pwm_set(float pwml,float pwmr)
  46          {
  47   1              if(pwml > 100)                          //电机速度限幅
  48   1              {
  49   2                      pwml = 100;
  50   2              }
  51   1          else if (pwmr < -100)               //电机速度限幅
  52   1          {
  53   2              pwmr = -100;
C51 COMPILER V9.57.0.0   MOTOR                                                             03/27/2023 21:48:32 PAGE 2   

  54   2          }  
  55   1              motor_l_pwm=pwml;
  56   1              motor_r_pwm=pwmr;
  57   1      }
  58          void motor_init()
  59          {
  60   1              motor_pwm_set(0,0);     //电机PWM设置 0
  61   1              motor_tim1_init();   //模拟电机IO PWM波定时器初始化
  62   1      }
  63          
  64          //正反皆可 若为反则 pwm为负数
  65          void track_PID(int pwm)
  66          {
  67   1              static float Integral_error,Last_error,error = 0;
  68   1              int L_Pwm,R_Pwm;
  69   1              code float P=4.5,I = 0.000001,D =9;
  70   1              code u8 limit_pwm=50;
  71   1              switch(frontPortData)
  72   1                      {                                         //421 8421
  73   2                              case 0x01:              error=8;        break;      //111 1110 0111 111
  74   2                              case 0x03:              error=7;        break;      //111 1100 0011 111
  75   2                              case 0x07:              error=6;        break;      //111 1000 0001 111
  76   2                              case 0x02:              error=5;        break;      //111 1101 1011 111
  77   2                              case 0x06:              error=4;        break;      //111 1001 1001 111
  78   2                              case 0x0E:              error=3;        break;      //111 0001 1000 111
  79   2                              case 0x04:              error=2;        break;      //111 1011 1101 111
  80   2                              case 0x0C:              error=1;        break;      //111 0011 1100 111
  81   2                              case 0x1C:              error=0;        break;      //110 0011 1100 011
  82   2                              case 0x7f:              error=0;        break;      //000 0000 0000 000
  83   2                              case 0x08:              error=0;        break;      //111 0111 1110 111
  84   2                              case 0x18:              error=-1;       break;      //110 0111 1110 011
  85   2                              case 0x38:              error=-2;       break;      //100 0111 1110 001
  86   2                              case 0x10:              error=-3;       break;      //110 1111 1111 011
  87   2                              case 0x30:              error=-4;       break;      //100 1111 1111 001
  88   2                              case 0x70:              error=-5;       break;      //000 1111 1111 000
  89   2                              case 0x20:              error=-6;       break;      //101 1111 1111 101
  90   2                              case 0x60:              error=-7;       break;      //001 1111 1111 100
  91   2                              case 0x40:              error=-8;       break;      //011 1111 1111 110
  92   2                              default :                       error=0;        break;
  93   2                      }
  94   1                      //error=error<0?-error:error;
  95   1                      //OLED_ShowNum(20,4,frontPortData,2,16);
  96   1                      
  97   1                      Integral_error+=error;
  98   1                      
  99   1                      R_Pwm = (pwm-(error*P+Integral_error*I+(error-Last_error)*D));
 100   1                      L_Pwm = (pwm+(error*P+Integral_error*I+(error-Last_error)*D));
 101   1                      
 102   1                      Last_error = error;
 103   1                      
 104   1                      if(pwm > 0)
 105   1                      {
 106   2                              if(L_Pwm > (pwm+limit_pwm))
 107   2                                      L_Pwm = (pwm+limit_pwm);
 108   2                              if(R_Pwm > (pwm+limit_pwm))
 109   2                                      R_Pwm = (pwm+limit_pwm);
 110   2                              if(L_Pwm <=(pwm-limit_pwm))
 111   2                                      L_Pwm = (pwm-limit_pwm);
 112   2                              if(R_Pwm <= (pwm-limit_pwm))
 113   2                                      R_Pwm = (pwm-limit_pwm);
 114   2                      }
 115   1                       motor_pwm_set(L_Pwm,R_Pwm);
C51 COMPILER V9.57.0.0   MOTOR                                                             03/27/2023 21:48:32 PAGE 3   

 116   1                      OLED_ShowNum(0,4,L_Pwm,2,16);
 117   1                      OLED_ShowNum(16,4,R_Pwm,2,16);
 118   1      }
 119          void brake()
 120          {
 121   1              //TODO写计时器延时
 122   1                      MOTOR_RF_FRONT = 1;
 123   1                      MOTOR_RF_BACK = 1;      
 124   1                      MOTOR_RB_FRONT = 1;
 125   1                      MOTOR_RB_BACK = 1;
 126   1                      MOTOR_LF_FRONT = 1;
 127   1                      MOTOR_LF_BACK = 1;       
 128   1                      MOTOR_LB_FRONT = 1;
 129   1                      MOTOR_LB_BACK = 1;  
 130   1      }
 131          void TestIrStatus(void)
 132          {
 133   1              u8 cnt_i,UserReg;
 134   1              u8 idata TestBuffer[11]="F:00000000";
 135   1              UserReg = frontPortData;
 136   1              for( cnt_i=2;cnt_i<10;cnt_i++)
 137   1                              {
 138   2                              if (UserReg & 0x80)   TestBuffer[cnt_i] ='1';
 139   2                              else                  TestBuffer[cnt_i] ='0';
 140   2                              UserReg <<= 1;
 141   2                              }
 142   1              OLED_ShowString(0,0,TestBuffer,16);
 143   1      
 144   1      
 145   1              TestBuffer[0] = 'B';
 146   1              UserReg = BackPortData;
 147   1              for( cnt_i=2;cnt_i<10;cnt_i++)
 148   1                              {
 149   2                              if (UserReg & 0x80)   TestBuffer[cnt_i] ='1';
 150   2                              else                  TestBuffer[cnt_i] ='0';
 151   2                              UserReg <<= 1;
 152   2                              }
 153   1              OLED_ShowString(0,2,TestBuffer,16);
 154   1              _nop_();        
 155   1      }
 156          void motor_irp()        interrupt 1
 157          {
 158   1              TR0=0;
 159   1              TL0 = 0xA0;                             //设置定时初始值
 160   1              TH0 = 0xF6;                             //设置定时初始值
 161   1              TR0=1;
 162   1              motor_counter++;
 163   1              //OLED_ShowString(0,4,"yyds",16);
 164   1          if (motor_counter >= 100)           //pwm波周期设置 周期= 100 * 100us = 10000us=10ms 即电机pwm波频率100Hz 周期1
             -0ms
 165   1          {
 166   2              motor_counter = 0;
 167   2          }
 168   1              //左motor_pwm设置
 169   1              if (motor_l_pwm >= 0)
 170   1              {
 171   2                      //左轮正转
 172   2                      
 173   2                      if(motor_counter < motor_l_pwm)  
 174   2                      {
 175   3                              MOTOR_LF_FRONT = 1;
 176   3                              MOTOR_LF_BACK = 0;       
C51 COMPILER V9.57.0.0   MOTOR                                                             03/27/2023 21:48:32 PAGE 4   

 177   3                              MOTOR_LB_FRONT = 1;
 178   3                              MOTOR_LB_BACK = 0;      
 179   3                      }
 180   2                      else
 181   2                      {
 182   3                              MOTOR_LF_FRONT = 0;
 183   3                              MOTOR_LF_BACK = 0;      
 184   3                              
 185   3                              MOTOR_LB_FRONT = 0;
 186   3                              MOTOR_LB_BACK = 0;    
 187   3                      }
 188   2              }
 189   1              else
 190   1              {
 191   2                      //左轮反转
 192   2                      
 193   2                       if(motor_counter < -motor_l_pwm)
 194   2                      {
 195   3                              MOTOR_LF_FRONT = 0;
 196   3                              MOTOR_LF_BACK = 1;      
 197   3                              MOTOR_LB_FRONT = 0;
 198   3                              MOTOR_LB_BACK = 1;      
 199   3                      }
 200   2                      else
 201   2                      {
 202   3                              MOTOR_LF_FRONT = 0;
 203   3                              MOTOR_LF_BACK = 0;      
 204   3                              
 205   3                              MOTOR_LB_FRONT = 0;
 206   3                              MOTOR_LB_BACK = 0;    
 207   3                      }
 208   2              }
 209   1              
 210   1              if (motor_r_pwm >= 0)
 211   1              {
 212   2                      //右轮正转
 213   2                      
 214   2                      if(motor_counter < motor_r_pwm)  
 215   2                      {
 216   3                              MOTOR_RF_FRONT = 1;
 217   3                              MOTOR_RF_BACK = 0;      
 218   3                              MOTOR_RB_FRONT = 1;
 219   3                              MOTOR_RB_BACK = 0;      
 220   3                      }
 221   2                      else
 222   2                      {
 223   3                              MOTOR_RF_FRONT = 0;
 224   3                              MOTOR_RF_BACK = 0;      
 225   3                              
 226   3                              MOTOR_RB_FRONT = 0;
 227   3                              MOTOR_RB_BACK = 0;    
 228   3                      }
 229   2              }
 230   1              else
 231   1              {
 232   2                      //右轮反转
 233   2                      
 234   2                       if(motor_counter < -motor_r_pwm)
 235   2                      {
 236   3                              MOTOR_RF_FRONT = 0;
 237   3                              MOTOR_RF_BACK = 1;      
 238   3                              MOTOR_RB_FRONT = 0;
C51 COMPILER V9.57.0.0   MOTOR                                                             03/27/2023 21:48:32 PAGE 5   

 239   3                              MOTOR_RB_BACK = 1;      
 240   3                      }
 241   2                      else
 242   2                      {
 243   3                              MOTOR_RF_FRONT = 0;
 244   3                              MOTOR_RF_BACK = 0;      
 245   3                              
 246   3                              MOTOR_RB_FRONT = 0;
 247   3                              MOTOR_RB_BACK = 0;    
 248   3                      }
 249   2              }
 250   1      /*------3中取二规则读取七路传感器--------
 251   1      /*前端传感器数据循环更新*/
 252   1              frontPortDataA = frontPortDataB;
 253   1              frontPortDataB = frontPortDataC;
 254   1              frontPortDataC = FrontStatus & 0x7f;    
 255   1              frontPortData = (frontPortDataB & ( frontPortDataA | frontPortDataC)) | (frontPortDataA & frontPortDataC)
             -;
 256   1      /*后端传感器数据循环更新*/
 257   1              BackPortDataA = BackPortDataB;
 258   1              BackPortDataB = BackPortDataC;
 259   1              BackPortDataC = BackStatus & 0x7f;
 260   1              BackPortData = (BackPortDataB & ( BackPortDataA | BackPortDataC)) | (BackPortDataA & BackPortDataC);
 261   1              
 262   1      /*------3中取二规则------*/     
 263   1      
 264   1              _nop_();
 265   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1412    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      14
   IDATA SIZE       =   ----      11
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
